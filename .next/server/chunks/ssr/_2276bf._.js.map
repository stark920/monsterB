{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/genoshuang/Documents/ccc/monsterB/app/articles/muscle/page.tsx"],"sourcesContent":["export default function Muscle() {\n  return (\n    <article className=\"p-6\">\n      <h1 className=\"text-xl font-bold\">骨骼肌與肌節</h1>\n      <hr className=\"my-4\" />\n      <article>\n        <h2 className=\"font-bold\">骨骼肌</h2>\n        <p className=\"my-2\">\n          骨骼肌有各種不同的形狀和大小。其中一個區別因素是肌纖維（即肌肉細胞）在骨骼肌內的排列方式。在這裡，我們有兩種可能的基本排列方式。\n          <br /><br />\n          在左側，我們看到的是梭狀纖維排列 (Fusiform Fiber Arrangement)，也稱為平行纖維排列 (Parallel Fiber Arrangement)。這種排列中，位於中間的肌肉纖維——這些細長的圓柱體——是與肌肉本身的方向平行的。換句話說，肌腱位於肌肉的兩端（這裡和這裡）。通常，這些肌腱的連接點是骨骼。我們可以看到，這裡的連接線表示散布在肌纖維周圍的結締組織，這些組織將個別肌纖維及其束結合起來，形成肌腱，並附著在肌肉的兩端。\n          <br /><br />\n          在梭狀纖維中，由於纖維縮短的方向與產生力的方向完全一致，因此肌肉具有較大的縮短能力。這是梭狀排列的一個優勢，它能提供較大的運動範圍。\n          <br /><br />\n          力量的產生\n          <br />\n          當談到特定肌肉的力量產生時，這取決於參與力量生成的纖維的橫截面面積。對於梭狀肌，我們可以在中間劃一條線，切割所有的肌纖維。這種排列中，解剖橫截面 (Anatomical Cross-Section) 與 生理橫截面 (Physiological Cross-Section) 是一致的，這意味著所有的肌纖維都參與肌肉的收縮。當肌肉完全受到刺激時，這些肌纖維的橫截面面積決定了可能產生的最大力量。\n          <br /><br />\n          在右側，我們看到的是另一種排列方式，其中肌腱偏移到肌肉的一側（例如這邊和這邊）。這裡的肌纖維排列被稱為羽狀纖維排列 (Pennate Fiber Arrangement)。“Pennate” 這個詞來源於羽毛的形狀，羽毛通常有一個中央軸，而羽毛的組成部分從中央軸呈一定角度延伸。此處顯示的是單羽狀 (Unipennate) 的例子。\n          <br /><br />\n          羽狀纖維排列的優點\n          <br />\n          羽狀纖維排列的一個優勢是，它的生理橫截面（切過所有參與收縮的纖維的垂直線）比解剖橫截面大得多。這意味著參與產生張力的纖維數量更多，因此可能產生更大的力量。\n          <br /><br />\n          羽狀纖維排列的缺點\n          <br />\n          羽狀纖維排列的缺點是，由於纖維以一定角度拉動肌腱，因此運動範圍受限，縮短的程度不如梭狀纖維那麼大。\n          <br /><br />\n          值得注意的是，許多大型肌肉通常採用羽狀纖維排列，這表明這種纖維排列的大力量生成能力非常適合於承載較大的負荷或移動身體的大部分重量。\n          <br />\n          這就是骨骼肌纖維排列的基本概念，兩種主要類型各有優劣，適應不同的功能需求。\n        </p>\n        <small className=\"p-2\">\n          - 影片來源：<a href=\"https://youtu.be/WL1urd4pvyo\" className=\"underline\" target=\"_blank\" rel=\"nofollow noopener noreferrer external\">Muscle fiber arrangements</a>\n        </small>\n      </article>\n\n      <hr className=\"my-4\" />\n\n      <article>\n        <h2 className=\"font-bold\">肌節</h2>\n        <p className=\"my-2\">\n          「肌節生成 (Sarcomere Genesis)」是一個非常複雜的術語，指的是新肌節的合成。肌節生成發生在骨骼肌中，並且如我們在下一支影片中將看到的，也會發生在心肌中。這可能與心臟對運動的適應或某些病理狀態有關。\n          <br /><br />\n          肌節生成的兩種機制\n          <br />\n          肌節生成有兩種主要的機制：平行排列的肌節與串聯排列的肌節。我們所談論的是新增的肌節，或在某些情況下甚至是肌節的減少。\n          <br /><br />\n          案例 1：未訓練的骨骼肌纖維\n          <br />\n          讓我們從第一個例子開始。這是一個普通的、未經訓練的骨骼肌纖維。每個方塊代表一個肌節。當然，實際上我們的肌節比這裡畫的多得多，但這是一個抽象的圖示來幫助理解概念。\n          <br />\n          假設我們進行了一些阻力訓練來增強力量。一般來說，當你專注於力量訓練時，你會使用高負荷、低次數的方式。透過這種訓練，肌肉應該能產生更大的力量。\n          <br />\n          那麼，肌肉如何增強力量呢？通常，這是透過新增肌節來實現的。新增的肌節可以以兩種方式出現：\n          <br />\n          1. 串聯排列 (In Series)：肌節沿著肌肉長軸的方向增加。\n          <br />\n          2. 平行排列 (In Parallel)：肌節的排列方向與原有肌節平行。\n          <br /><br />\n          平行排列的肌節\n          <br />\n          阻力訓練（如高負荷低次數訓練）通常導致肌節的平行排列。如下圖所示，假設我們最初有這樣的一組肌節（單一縱列）。透過訓練，我們可以增加更多平行排列的肌節，形成多個縱列。\n          <br />\n          增加平行排列的肌節有助於提升肌肉產生力量的能力，這使得肌肉能夠產生更大的扭矩。換句話說，這種適應使肌纖維更有力。因此，平行排列的肌節是增強力量的關鍵。\n          <br /><br />\n          串聯排列的肌節\n          <br />\n          另一種方式是新增串聯排列的肌節。這指的是肌節在肌肉長軸方向上延伸。這種排列主要帶來以下兩個效果：\n          <br />\n          1. 增加收縮速度：肌肉能更快速地收縮。\n          <br />\n          2. 增加縮短能力：肌肉能縮短得更長。\n          <br /><br />\n          然而，串聯排列的肌節不會增加力量輸出。與平行排列不同，它不影響肌肉產生的力量。\n          <br />\n          串聯排列的肌節出現的情況\n          <br />\n          串聯排列的肌節通常出現在以下情況：\n          <br />\n          1. 肌肉被固定於延長狀態：例如在手術後，某個肢體長時間處於拉長的狀態。此時，肌肉會增加串聯排列的肌節來適應拉長的情況。\n          <br />\n          2. 力量訓練中的爆發力訓練：爆發力訓練可以提高肌肉收縮的速度，並可能導致肌節的串聯增加。\n          <br />\n          3. 柔韌性訓練：簡單的柔韌性鍛煉也可以導致串聯排列的肌節增加。\n          <br />\n          相反地，如果肌肉長期處於縮短狀態，例如肢體被固定在彎曲位置，則肌節可能會減少，尤其是串聯排列的肌節。這會導致收縮速度和縮短能力的降低。\n          <br /><br />\n          總結\n          <br />\n          • 平行排列的肌節：增加力量與扭矩。\n          <br />\n          • 串聯排列的肌節：增加收縮速度與縮短能力。\n        </p>\n        <small className=\"p-2\">\n          - 影片來源：<a href=\"https://youtu.be/FYQMnCHXvGI\" className=\"underline\" target=\"_blank\" rel=\"nofollow noopener noreferrer external\">Sarcomerogenesis | Adding Sarcomeres in Parallel & Series</a>\n        </small>\n      </article>\n    </article>\n  )\n}\n"],"names":[],"mappings":";;;;;AAAe,SAAS;IACtB,qBACE,8OAAC;QAAQ,WAAU;;0BACjB,8OAAC;gBAAG,WAAU;0BAAoB;;;;;;0BAClC,8OAAC;gBAAG,WAAU;;;;;;0BACd,8OAAC;;kCACC,8OAAC;wBAAG,WAAU;kCAAY;;;;;;kCAC1B,8OAAC;wBAAE,WAAU;;4BAAO;0CAElB,8OAAC;;;;;0CAAK,8OAAC;;;;;4BAAK;0CAEZ,8OAAC;;;;;0CAAK,8OAAC;;;;;4BAAK;0CAEZ,8OAAC;;;;;0CAAK,8OAAC;;;;;4BAAK;0CAEZ,8OAAC;;;;;4BAAK;0CAEN,8OAAC;;;;;0CAAK,8OAAC;;;;;4BAAK;0CAEZ,8OAAC;;;;;0CAAK,8OAAC;;;;;4BAAK;0CAEZ,8OAAC;;;;;4BAAK;0CAEN,8OAAC;;;;;0CAAK,8OAAC;;;;;4BAAK;0CAEZ,8OAAC;;;;;4BAAK;0CAEN,8OAAC;;;;;0CAAK,8OAAC;;;;;4BAAK;0CAEZ,8OAAC;;;;;4BAAK;;;;;;;kCAGR,8OAAC;wBAAM,WAAU;;4BAAM;0CACd,8OAAC;gCAAE,MAAK;gCAA+B,WAAU;gCAAY,QAAO;gCAAS,KAAI;0CAAwC;;;;;;;;;;;;;;;;;;0BAIpI,8OAAC;gBAAG,WAAU;;;;;;0BAEd,8OAAC;;kCACC,8OAAC;wBAAG,WAAU;kCAAY;;;;;;kCAC1B,8OAAC;wBAAE,WAAU;;4BAAO;0CAElB,8OAAC;;;;;0CAAK,8OAAC;;;;;4BAAK;0CAEZ,8OAAC;;;;;4BAAK;0CAEN,8OAAC;;;;;0CAAK,8OAAC;;;;;4BAAK;0CAEZ,8OAAC;;;;;4BAAK;0CAEN,8OAAC;;;;;4BAAK;0CAEN,8OAAC;;;;;4BAAK;0CAEN,8OAAC;;;;;4BAAK;0CAEN,8OAAC;;;;;4BAAK;0CAEN,8OAAC;;;;;0CAAK,8OAAC;;;;;4BAAK;0CAEZ,8OAAC;;;;;4BAAK;0CAEN,8OAAC;;;;;4BAAK;0CAEN,8OAAC;;;;;0CAAK,8OAAC;;;;;4BAAK;0CAEZ,8OAAC;;;;;4BAAK;0CAEN,8OAAC;;;;;4BAAK;0CAEN,8OAAC;;;;;4BAAK;0CAEN,8OAAC;;;;;0CAAK,8OAAC;;;;;4BAAK;0CAEZ,8OAAC;;;;;4BAAK;0CAEN,8OAAC;;;;;4BAAK;0CAEN,8OAAC;;;;;4BAAK;0CAEN,8OAAC;;;;;4BAAK;0CAEN,8OAAC;;;;;4BAAK;0CAEN,8OAAC;;;;;4BAAK;0CAEN,8OAAC;;;;;0CAAK,8OAAC;;;;;4BAAK;0CAEZ,8OAAC;;;;;4BAAK;0CAEN,8OAAC;;;;;4BAAK;;;;;;;kCAGR,8OAAC;wBAAM,WAAU;;4BAAM;0CACd,8OAAC;gCAAE,MAAK;gCAA+B,WAAU;gCAAY,QAAO;gCAAS,KAAI;0CAAwC;;;;;;;;;;;;;;;;;;;;;;;;AAK1I"}},
    {"offset": {"line": 420, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 431, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 431, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 437, "column": 0}, "map": {"version":3,"sources":["file:///Users/genoshuang/Documents/ccc/monsterB/node_modules/next/dist/src/build/templates/app-page.ts"],"sourcesContent":["import type { LoaderTree } from '../../server/lib/app-dir-module'\nimport { AppPageRouteModule } from '../../server/route-modules/app-page/module.compiled' with { 'turbopack-transition': 'next-ssr' }\nimport { RouteKind } from '../../server/route-kind'\n\n// These are injected by the loader afterwards.\n\n/**\n * The tree created in next-app-loader that holds component segments and modules\n * and I've updated it.\n */\ndeclare const tree: LoaderTree\ndeclare const pages: any\n\n// We inject the tree and pages here so that we can use them in the route\n// module.\n// INJECT:tree\n// INJECT:pages\n\nexport { tree, pages }\n\nexport { default as GlobalError } from 'VAR_MODULE_GLOBAL_ERROR'\n\n// These are injected by the loader afterwards.\ndeclare const __next_app_require__: any\ndeclare const __next_app_load_chunk__: any\n\n// INJECT:__next_app_require__\n// INJECT:__next_app_load_chunk__\n\nexport const __next_app__ = {\n  require: __next_app_require__,\n  loadChunk: __next_app_load_chunk__,\n}\n\nexport * from '../../server/app-render/entry-base'\n\n// Create and export the route module that will be consumed.\nexport const routeModule = new AppPageRouteModule({\n  definition: {\n    kind: RouteKind.APP_PAGE,\n    page: 'VAR_DEFINITION_PAGE',\n    pathname: 'VAR_DEFINITION_PATHNAME',\n    // The following aren't used in production.\n    bundlePath: '',\n    filename: '',\n    appPaths: [],\n  },\n  userland: {\n    loaderTree: tree,\n  },\n})\n"],"names":["AppPageRouteModule","RouteKind","tree","pages","default","GlobalError","__next_app__","require","__next_app_require__","loadChunk","__next_app_load_chunk__","routeModule","definition","kind","APP_PAGE","page","pathname","bundlePath","filename","appPaths","userland","loaderTree"],"mappings":";;;;;;AAeA,cAAc;AAdd,SAASA,kBAAkB,QAAQ,2DAA2D;IAAE,wBAAwB;AAAW,EAAC;AAYpI,yEAAyE;AAKzE,SAASE,IAAI,EAAEC,KAAK,GAAE;AAStB,iCAAiC;;;;;;;;AAEjC,OAAO,MAAMG,eAAe,6CAAA;IAC1BC,MAAAA,GAASC;IACTC,EAAAA,OAAAA;IAAAA,CAAWC;IAAAA;QACb,EAAC,UAAA;YAAA;YAAA;gBAED,YAAA;oBAAA,CAAc;oBAAA,4BAAoC;wBAElD,YAAA;4BAAA;4BAAA,CACA,kCAD4D;4BAC5D,IAAO,MAAMC,cAAc,IAAIX,mBAAmB;kCAChDY,QAAAA,CAAAA,CAAY;gCAAA,QAAA;oCAAA,IAAA;oCAAA;iCAAA;;+BACVC,MAAMZ,UAAUa,QAAQ;;yBACxBC,MAAM;8BACNC,IAAAA,CAAAA;oBAAAA,CAAU;iBAAA;;iBACV,2CAA2C;sBAC3CC,IAAAA,CAAAA;YAAAA;SAAAA,CAAY;;SACZC,UAAU;cACVC,IAAAA;YAAAA,CAAU,EAAE,GAAA;gBACd,OAAA,QAAA;wBAAA;4BACAC,KAAAA,CAAAA,GAAAA,2KAAAA,CAAAA,CAAU,qBAAA,EAAA,MAAA,MAAA,MAAA,EAAA,iBAAA,CAAA,CAAA,EAAA,mSAAA,CAAA,UAAA,CAAA,GAAA,CAAA,KAAA,CAAA,KAAA,MAAA,CAAA,CAAA,EAAA,CAAA,EAAA,EAAA;4BACRC,OAAAA,GAAAA,mSAAAA,CAAAA,EAAYnB,QAAAA,CAAAA,KAAAA,CAAAA,CAAAA,EAAAA,mSAAAA,CAAAA,UAAAA,CAAAA,MAAAA,EAAAA;4BACd,MAAA,CAAA,YAAA,CAAA;wBACA;qBAAA","ignoreList":[0]}},
    {"offset": {"line": 538, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}